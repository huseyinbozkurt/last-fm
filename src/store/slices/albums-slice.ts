import { createAsyncThunk, createSlice, createEntityAdapter } from '@reduxjs/toolkit';
import { RootState } from '../';
import { fetchTopAlbums, AlbumsRawData, AlbumsData } from '../helpers';
export interface InitialState {
  pages: AlbumsRawData["data"]["topalbums"]["@attr"] | null;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: InitialState = {
  pages: null,
  status: 'idle',
};


const albumAdapter = createEntityAdapter<AlbumsData>({
    selectId: (album) => album.url,
});

export const fetchAlbumsAsync = createAsyncThunk(
  'album/fetch',
  async (name: string) => {
    const response = await fetchTopAlbums(name);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const albumsSlice = createSlice({
  name: 'artists',
  initialState: {
    ...albumAdapter.getInitialState(),
    ...initialState
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAlbumsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAlbumsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.pages = action.payload.topalbums['@attr'];
        albumAdapter.setAll(state, action.payload.topalbums.album);
      })
      .addCase(fetchAlbumsAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
export const selectAlbums = (state: RootState) => Object.values(state.albums.entities) as Array<AlbumsData>


export default albumsSlice.reducer;
